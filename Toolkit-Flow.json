[
    {
        "id": "c7c51d373990a1fa",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "node-red-ai-toolkit",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "f27a059d7c76c412",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Configuration",
        "info": "",
        "x": 90,
        "y": 240,
        "wires": []
    },
    {
        "id": "d83adc2f187a5ab9",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "configure",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 80,
        "y": 300,
        "wires": [
            [
                "52418588691ed3c2"
            ]
        ]
    },
    {
        "id": "6af725c9630f5ef9",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 400,
        "y": 280,
        "wires": []
    },
    {
        "id": "52418588691ed3c2",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "  const {\n    acceptableNonEmptyString, acceptableModel,\n    assertInspectableFolder\n  } = flow.get('commonCode')\n\n/**** ModelFolder ****/\n\n  let ModelFolder = acceptableNonEmptyString(msg.ModelFolder)\n    if (ModelFolder != null) try {\n      await assertInspectableFolder(ModelFolder)\n    } catch (Signal) {\n      node.warn(Signal.message)\n      ModelFolder = undefined\n    }\n  if (ModelFolder != null) {\n    flow.set('ModelFolder',ModelFolder)\n  }\n\n/**** ExecutableFolder ****/\n\n  let ExecutableFolder = acceptableNonEmptyString(msg.ExecutableFolder)\n    if (ExecutableFolder != null) try {\n      await assertInspectableFolder(ExecutableFolder)\n    } catch (Signal) {\n      node.warn(Signal.message)\n      ExecutableFolder = undefined\n    }\n  if (ExecutableFolder != null) {\n    flow.set('ExecutableFolder',ExecutableFolder)\n  }\n\n/**** DefaultTextModel ****/\n\n  let DefaultTextModel = acceptableModel(msg.DefaultTextModel,'text')\n  if (DefaultTextModel != null) {\n    flow.set('DefaultTextModel',DefaultTextModel)\n  }\n\n/**** DefaultCodeModel ****/\n\n  let DefaultCodeModel = acceptableModel(msg.DefaultCodeModel,'code')\n  if (DefaultCodeModel != null) {\n    flow.set('DefaultCodeModel',DefaultCodeModel)\n  }\n\n/**** DefaultEmbeddingsModel ****/\n\n  let DefaultEmbeddingsModel = acceptableModel(msg.DefaultEmbeddingsModel,'embeddings')\n  if (DefaultEmbeddingsModel != null) {\n    flow.set('DefaultEmbeddingsModel',DefaultEmbeddingsModel)\n  }\nreturn [msg,null]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 300,
        "wires": [
            [
                "6af725c9630f5ef9"
            ],
            [
                "8fcb24e7b94eb2c0"
            ]
        ]
    },
    {
        "id": "8fcb24e7b94eb2c0",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 390,
        "y": 320,
        "wires": []
    },
    {
        "id": "20d770dbee6b3fc6",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Model List",
        "info": "",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "d4dfef4c8826163f",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "list_models",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "3acff27d8da4ea50"
            ]
        ]
    },
    {
        "id": "f28f593c71780f3b",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1080,
        "y": 140,
        "wires": []
    },
    {
        "id": "3acff27d8da4ea50",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { availableModels } = flow.get('commonCode')\n\n;(async function () {\n  try {\n    msg.payload = await availableModels()\n\n    node.send([msg,null])\n    node.done()\n  } catch (Signal) {\n    msg.statusCode = Signal.statusCode || 500\n    msg.payload    = Signal.message\n\n    node.send([null,msg])\n    node.done()\n  }\n})()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            [
                "f28f593c71780f3b"
            ],
            [
                "66cbdc84cfa7a35c"
            ]
        ]
    },
    {
        "id": "66cbdc84cfa7a35c",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e925a9ae4836a65",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Text Completion",
        "info": "",
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "5b9643f8ab152fe5",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "complete_text",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 750,
        "y": 320,
        "wires": [
            [
                "5d3c8db44f01bd5e"
            ]
        ]
    },
    {
        "id": "8477e25db44665bb",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1080,
        "y": 300,
        "wires": []
    },
    {
        "id": "5d3c8db44f01bd5e",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { quoted } = flow.get('JIL')\n\nconst {\n    acceptableNumberInRange, acceptableIntegerInRange, acceptableString,\n    acceptableModel,\n    assertInspectableFolder, assertExecutableFile,\n    InfoForModel, FileForModel,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\nconst ExecutableFolder = flow.get('ExecutableFolder')\n\n    ; (async function () {\n        try {\n            let Prompt = acceptableString(msg.payload)\n            Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n            /**** retrieve settings or provide defaults ****/\n\n            let Model = acceptableModel(msg.Model, 'text') || DefaultTextModel\n            let ModelFile = await FileForModel(Model)\n            let ModelInfo = InfoForModel(Model)\n\n            let Seed = acceptableIntegerInRange(msg.Seed, -1, -1)\n            let Threads = acceptableIntegerInRange(msg.Threads, 4, 1, os.cpus().length)\n            let ContextLength = acceptableIntegerInRange(msg.ContextLength, 512, 1, ModelInfo.ContextLength)\n            let keep = acceptableIntegerInRange(msg.keep, 0, 0, ContextLength)\n            let PredictionLength = acceptableIntegerInRange(msg.PredictionLength, 128, 1, ContextLength)\n            let topK = acceptableIntegerInRange(msg.topK, 40, 1, 100)\n            let topP = acceptableNumberInRange(msg.topP, 0.9, 0.1, 1.0, true, true)\n            let Temperature = acceptableNumberInRange(msg.topP, 0.8, 0.0, 1.0, true, true)\n            let Batches = acceptableIntegerInRange(msg.Batches, 8, 1, 100)\n            let Grammar = acceptableString(msg.Grammar, '').trim()\n\n            /**** determine executable ****/\n\n            let ExecutableFile = path.join(\n                ExecutableFolder, ModelInfo.Architecture === 'gptneox' ? 'gpt-neox' : 'llama'\n            )\n            await assertExecutableFile(ExecutableFile)\n\n            /**** combine all these settings into a command ****/\n\n            let Command\n            if (ModelInfo.Architecture === 'gptneox') {\n                Command = (\n                    ExecutableFile + ' --model ' + ModelFile +\n                    ' --context ' + ContextLength +\n                    ' --n_predict ' + PredictionLength +\n                    ' --threads ' + Threads + ' --batch_size ' + Batches +\n                    (Seed < 0 ? '' : ' --seed ' + Seed) + ' --temp ' + Temperature +\n                    ' --top_k ' + topK + ' --top_p ' + topP +\n                    ' --prompt \"' + encoded(Prompt) + '\"'\n                )\n            } else {\n                Command = (\n                    ExecutableFile + ' --model ' + ModelFile + ' --mlock ' +\n                    ' --ctx_size ' + ContextLength + ' --keep ' + keep +\n                    ' --n_predict ' + PredictionLength +\n                    ' --threads ' + Threads + ' --batch_size ' + Batches +\n                    ' --seed ' + Seed + ' --temp ' + Temperature +\n                    ' --top_k ' + topK + ' --top_p ' + topP\n                )\n\n                node.warn(ModelInfo)\n                ModelInfo.ReversePrompts.forEach(\n                    (ReversePrompt) => Command += ' --reverse-prompt ' + quoted(ReversePrompt)\n                )\n\n                Command += (\n                    (Grammar === '' ? '' : ' --grammar \"' + encoded(Grammar) + '\"') +\n                    ' --prompt \"' + encoded(Prompt) + '\"'\n                )\n            }\n\n            const Options = {\n                cwd: ExecutableFolder\n            }\n\n            /**** extract actual reponse from command output ****/\n\n            let ResponseFrom\n            if (ModelInfo.Architecture === 'gptneox') {\n                ResponseFrom = function (Text) {\n                    let HeaderLength = Text.indexOf(\n                        '\\n', Text.indexOf(Prompt) + Prompt.length\n                    )\n                    Text = Text.slice(HeaderLength + 1)\n\n                    let TrailerIndex = Text.indexOf('<|endoftext|>')\n                    if (TrailerIndex < 0) {\n                        TrailerIndex = Text.indexOf('\\nmain: mem per token')\n                    }\n                    Text = Text.slice(0, TrailerIndex)\n\n                    return Text\n                }\n            } else {\n                ResponseFrom = function (Text) {\n                    let HeaderLength = Text.indexOf('\\n\\n\\n')\n                    Text = Text.slice(HeaderLength + 1)\n\n                    let TrailerIndex = Text.indexOf('<|endoftext|>')\n                    if (TrailerIndex < 0) {\n                        TrailerIndex = Text.indexOf('\\nllama_print_timings')\n                    }\n                    Text = Text.slice(0, TrailerIndex)\n\n                    return Text\n                }\n            }\n\n            /**** now infer a response from the given prompt ****/\n\n            node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n            const ShellProcess = child_process.exec(Command, Options)\n            let stdout = ''\n            for await (const Chunk of ShellProcess.stdout) {\n                stdout += Chunk\n            }\n\n            let stderr = ''\n            for await (const Chunk of ShellProcess.stderr) {\n                stderr += Chunk\n            }\n\n            const ExitCode = (await new Promise((resolve) => {\n                ShellProcess.on('close', resolve)\n            })) || 0\n            if (ExitCode !== 0) {\n                node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n                msg.statusCode = 500 + ExitCode\n                msg.payload = stderr\n            } else {\n                node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n                stdout = stdout.trim()\n\n                msg.statusCode = (stdout === '' ? 204 : 200)\n                msg.payload = ResponseFrom(stdout)\n            }\n\n            node.send([msg, null])\n            node.done()\n        } catch (Signal) {\n            msg.statusCode = Signal.statusCode || 500\n            msg.payload = Signal.message\n\n            node.send([null, msg])\n            node.done()\n        }\n\n        /**** encoded ****/\n\n        function encoded(Text) {\n            return Text.replace(/'/g, \"'\\\"'\\\"'\")\n        }\n    })()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "child_process",
                "module": "child_process"
            }
        ],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "8477e25db44665bb"
            ],
            [
                "9dd918f5bfeb8d86"
            ]
        ]
    },
    {
        "id": "9dd918f5bfeb8d86",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1070,
        "y": 340,
        "wires": []
    },
    {
        "id": "57829b6621ccf96f",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Chat Completion",
        "info": "",
        "x": 760,
        "y": 380,
        "wires": []
    },
    {
        "id": "17f5e6bbea345c66",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "complete_chat",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 760,
        "y": 440,
        "wires": [
            [
                "d0ce83fc6847b3a3"
            ]
        ]
    },
    {
        "id": "326cabf27ac56da3",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "d0ce83fc6847b3a3",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { quoted } = flow.get('JIL')\n\nconst {\n  acceptableNumberInRange, acceptableIntegerInRange, acceptableString,\n  acceptableModel,\n  assertInspectableFolder, assertExecutableFile,\n  InfoForModel, FileForModel,\n  PromptFromMessages,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\nconst ExecutableFolder = flow.get('ExecutableFolder')\n\n  ; (async function () {\n    try {\n      let MessageList = msg.payload                     // will be validated later\n\n      /**** retrieve settings or provide defaults ****/\n\n      let Model = acceptableModel(msg.Model, 'text') || DefaultTextModel\n      let ModelFile = await FileForModel(Model)\n      let ModelInfo = InfoForModel(Model)\n\n      let Seed = acceptableIntegerInRange(msg.Seed, -1, -1)\n      let Threads = acceptableIntegerInRange(msg.Threads, 4, 1, os.cpus().length)\n      let ContextLength = acceptableIntegerInRange(msg.ContextLength, 512, 1, ModelInfo.ContextLength)\n      let keep = acceptableIntegerInRange(msg.keep, 0, 0, ContextLength)\n      let PredictionLength = acceptableIntegerInRange(msg.PredictionLength, 128, 1, ContextLength)\n      let topK = acceptableIntegerInRange(msg.topK, 40, 1, 100)\n      let topP = acceptableNumberInRange(msg.topP, 0.9, 0.1, 1.0, true, true)\n      let Temperature = acceptableNumberInRange(msg.topP, 0.8, 0.0, 1.0, true, true)\n      let Batches = acceptableIntegerInRange(msg.Batches, 8, 1, 100)\n      let Grammar = acceptableString(msg.Grammar, '').trim()\n\n      /**** now construct a prompt from the given messages ****/\n\n      let Prompt = PromptFromMessages(MessageList, Model)// validates \"MessageList\"\n      Prompt = Prompt.replace(/\"/g, '\\\\\"')\n      Prompt = Prompt.replace(/'/g, '') // TODO: change!\n\n      /**** determine executable ****/\n\n      let ExecutableFile = path.join(\n        ExecutableFolder, ModelInfo.Architecture === 'gptneox' ? 'gpt-neox' : 'llama'\n      )\n      await assertExecutableFile(ExecutableFile)\n\n      /**** combine all these settings into a command ****/\n\n      let Command\n      if (ModelInfo.Architecture === 'gptneox') {\n        Command = (\n          ExecutableFile + ' --model ' + ModelFile +\n          ' --context ' + ContextLength +\n          ' --n_predict ' + PredictionLength +\n          ' --threads ' + Threads + ' --batch_size ' + Batches +\n          (Seed < 0 ? '' : ' --seed ' + Seed) + ' --temp ' + Temperature +\n          ' --top_k ' + topK + ' --top_p ' + topP +\n          ' --prompt \"' + encoded(Prompt) + '\"'\n        )\n      } else {\n        Command = (\n          ExecutableFile + ' --model ' + ModelFile + ' --mlock ' +\n          ' --ctx_size ' + ContextLength + ' --keep ' + keep +\n          ' --n_predict ' + PredictionLength +\n          ' --threads ' + Threads + ' --batch_size ' + Batches +\n          ' --seed ' + Seed + ' --temp ' + Temperature +\n          ' --top_k ' + topK + ' --top_p ' + topP\n        )\n\n        ModelInfo.ReversePrompts.forEach(\n          (ReversePrompt) => Command += ' --reverse-prompt ' + quoted(ReversePrompt)\n        )\n\n        Command += (\n          (Grammar === '' ? '' : ' --grammar \"' + encoded(Grammar) + '\"') +\n          ' --prompt \"' + encoded(Prompt) + '\"'\n        )\n      }\n\n      const Options = {\n        cwd: ExecutableFolder\n      }\n\n      /**** extract actual reponse from command output ****/\n      node.warn('Command = ' + Command)\n\n      let ResponseFrom\n      if (ModelInfo.Architecture === 'gptneox') {\n        ResponseFrom = function (Text) {\n          let HeaderLength = Text.indexOf(\n            '\\n', Text.indexOf(Prompt) + Prompt.length\n          )\n          Text = Text.slice(HeaderLength + 1)\n\n          let TrailerIndex = Text.indexOf('<|endoftext|>')\n          if (TrailerIndex < 0) {\n            TrailerIndex = Text.indexOf('\\nmain: mem per token')\n          }\n          Text = Text.slice(0, TrailerIndex)\n\n          return Text\n        }\n      } else {\n        ResponseFrom = function (Text) {\n          let HeaderLength = Text.indexOf('\\n\\n\\n')\n          Text = Text.slice(HeaderLength + 1)\n\n          Text = Text.slice(Prompt.length)\n\n          let TrailerIndex = Text.indexOf('<|endoftext|>')\n          if (TrailerIndex < 0) {\n            TrailerIndex = Text.indexOf('\\nllama_print_timings')\n          }\n          Text = Text.slice(0, TrailerIndex)\n\n          return Text\n        }\n      }\n\n      /**** now infer a response from the given prompt ****/\n\n      node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n      const ShellProcess = child_process.exec(Command, Options)\n      let stdout = ''\n      for await (const Chunk of ShellProcess.stdout) {\n        stdout += Chunk\n      }\n\n      let stderr = ''\n      for await (const Chunk of ShellProcess.stderr) {\n        stderr += Chunk\n      }\n\n      const ExitCode = (await new Promise((resolve) => {\n        ShellProcess.on('close', resolve)\n      })) || 0\n      if (ExitCode !== 0) {\n        node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n        msg.statusCode = 500 + ExitCode\n        msg.payload = stderr\n      } else {\n        node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n        stdout = stdout.trim()\n\n        msg.statusCode = (stdout === '' ? 204 : 200)\n        msg.payload = ResponseFrom(stdout)\n      }\n\n      node.send([msg, null])\n      node.done()\n    } catch (Signal) {\n      msg.statusCode = Signal.statusCode || 500\n      msg.payload = Signal.message\n\n      node.send([null, msg])\n      node.done()\n    }\n\n    /**** encoded ****/\n\n    function encoded(Text) {\n      return Text.replace(/'/g, \"'\\\"'\\\"'\")\n    }\n  })()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "child_process",
                "module": "child_process"
            }
        ],
        "x": 940,
        "y": 440,
        "wires": [
            [
                "326cabf27ac56da3"
            ],
            [
                "6a2cbaa9d48b012e"
            ]
        ]
    },
    {
        "id": "6a2cbaa9d48b012e",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "9d2c1ea2be57fc38",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Tokenization",
        "info": "",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "f77c0f8fa19a2b60",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "tokenize_text",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 750,
        "y": 560,
        "wires": [
            [
                "9794258f73de7ed1"
            ]
        ]
    },
    {
        "id": "2c348d0c188be2ca",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1080,
        "y": 540,
        "wires": []
    },
    {
        "id": "9794258f73de7ed1",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { quoted } = flow.get('JIL')\n\nconst {\n  acceptableIntegerInRange, acceptableString,\n    acceptableModel,\n  assertInspectableFolder, assertExecutableFile,\n  InfoForModel, FileForModel,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\nconst ExecutableFolder = flow.get('ExecutableFolder')\n\n;(async function () {\n  try {\n    let Prompt = acceptableString(msg.payload)\n      Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n  /**** retrieve settings or provide defaults ****/\n\n    let Model     = acceptableModel(msg.Model,'text') || DefaultTextModel\n    let ModelFile = await FileForModel(Model)\n    let ModelInfo = InfoForModel(Model)\n\n    let Threads       = acceptableIntegerInRange(msg.Threads,         4, 1,os.cpus().length)\n    let ContextLength = acceptableIntegerInRange(msg.ContextLength, 512, 1,ModelInfo.ContextLength)\n\n  /**** determine executable ****/\n\n    let ExecutableFile = path.join(\n      ExecutableFolder, ModelInfo.Architecture === 'gptneox' ? 'gpt-neox' : 'llama-tokens'\n    )\n    await assertExecutableFile(ExecutableFile)\n\n  /**** combine all these settings into a command ****/\n\n    let Command\n    if (ModelInfo.Architecture === 'gptneox') {\n      Command = (\n        ExecutableFile + ' --model ' + ModelFile +\n        ' --context ' + ContextLength +\n        ' --n_predict 0' +\n        ' --threads ' + Threads +\n        ' --prompt \"' + encoded(Prompt) + '\"'\n      )\n    } else {\n      Command = (\n        ExecutableFile + ' --model ' + ModelFile + ' --mlock ' +\n        ' --ctx_size ' + ContextLength +\n        ' --threads ' + Threads +\n        ' --prompt \"' + encoded(Prompt) + '\"'\n      )\n    }\n\n    const Options = {\n      cwd:ExecutableFolder\n    }\n\n  /**** extract actual reponse from command output ****/\n\n    let ResponseFrom\n    if (ModelInfo.Architecture === 'gptneox') {\n      ResponseFrom = function (Text) {\n        const HeaderLength = Text.indexOf('\\nmain: token[0]')\n        Text = Text.slice(HeaderLength + 1)\n\n        const TrailerIndex = Text.indexOf('\\n\\n')\n        Text = Text.slice(0,TrailerIndex)\n\n        return Text.replace(/^main: token\\[%d+\\] =%s+/g,'')\n      }\n    } else {\n      ResponseFrom = function (Text) {\n        let HeaderLength = Text.indexOf('system_info')\n        Text = Text.slice(HeaderLength + 1)\n          .replace(/^[^\\n]*\\n/,'')\n\n        let TrailerIndex = Text.indexOf('\\n\\nllama_print_timings')\n        Text = Text.slice(0,TrailerIndex)\n\n        return Text.trim().split('\\n').map((Line) => {\n          let Id    = parseInt(Line.trim(),10)\n          let Value = Line.replace(/^\\s*\\d+./,'')\n          return { Id,Value }\n        })\n      }\n    }\n\n  /**** now tokenize the given prompt ****/\n\n    node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n    const ShellProcess = child_process.exec(Command, Options)\n    let stdout = ''\n    for await (const Chunk of ShellProcess.stdout) {\n      stdout += Chunk\n    }\n\n    let stderr = ''\n    for await (const Chunk of ShellProcess.stderr) {\n      stderr += Chunk\n    }\n\n    const ExitCode = (await new Promise((resolve) => {\n      ShellProcess.on('close', resolve)\n    })) || 0\n    if (ExitCode !== 0) {\n      node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n      msg.statusCode = 500 + ExitCode\n      msg.payload = stderr\n    } else {\n      node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n      stdout = stdout.trim()\n\n      msg.statusCode = (stdout === '' ? 204 : 200)\n      msg.payload    = ResponseFrom(stdout)\n    }\n\n    node.send([msg,null])\n    node.done()\n  } catch (Signal) {\n    msg.statusCode = Signal.statusCode || 500\n    msg.payload    = Signal.message\n\n    node.send([null,msg])\n    node.done()\n  }\n\n/**** encoded ****/\n\n  function encoded(Text) {\n    return Text.replace(/'/g, \"'\\\"'\\\"'\")\n  }\n})()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "child_process",
                "module": "child_process"
            }
        ],
        "x": 920,
        "y": 560,
        "wires": [
            [
                "2c348d0c188be2ca"
            ],
            [
                "f79d2227b49f5a1e"
            ]
        ]
    },
    {
        "id": "f79d2227b49f5a1e",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "f2c01e623cee97bf",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Token Counting",
        "info": "",
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "1f9939ab780a0362",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "count_text_tokens",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 770,
        "y": 680,
        "wires": [
            [
                "2ef71303f9668637"
            ]
        ]
    },
    {
        "id": "bf118629fea1988e",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1120,
        "y": 660,
        "wires": []
    },
    {
        "id": "2ef71303f9668637",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { quoted } = flow.get('JIL')\n\nconst {\n  acceptableIntegerInRange, acceptableString,\n    acceptableModel,\n  assertInspectableFolder, assertExecutableFile,\n  InfoForModel, FileForModel,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\nconst ExecutableFolder = flow.get('ExecutableFolder')\n\n;(async function () {\n  try {\n    let Prompt = acceptableString(msg.payload)\n      Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n  /**** retrieve settings or provide defaults ****/\n\n    let Model     = acceptableModel(msg.Model,'text') || DefaultTextModel\n    let ModelFile = await FileForModel(Model)\n    let ModelInfo = InfoForModel(Model)\n\n    let Threads       = acceptableIntegerInRange(msg.Threads,         4, 1,os.cpus().length)\n    let ContextLength = acceptableIntegerInRange(msg.ContextLength, 512, 1,ModelInfo.ContextLength)\n\n  /**** determine executable ****/\n\n    let ExecutableFile = path.join(\n      ExecutableFolder, ModelInfo.Architecture === 'gptneox' ? 'gpt-neox' : 'llama-tokens'\n    )\n    await assertExecutableFile(ExecutableFile)\n\n  /**** combine all these settings into a command ****/\n\n    let Command\n    if (ModelInfo.Architecture === 'gptneox') {\n      Command = (\n        ExecutableFile + ' --model ' + ModelFile +\n        ' --context ' + ContextLength +\n        ' --n_predict 0' +\n        ' --threads ' + Threads +\n        ' --prompt \"' + encoded(Prompt) + '\"'\n      )\n    } else {\n      Command = (\n        ExecutableFile + ' --model ' + ModelFile + ' --mlock ' +\n        ' --ctx_size ' + ContextLength +\n        ' --threads ' + Threads +\n        ' --prompt \"' + encoded(Prompt) + '\"'\n      )\n    }\n\n    const Options = {\n      cwd:ExecutableFolder\n    }\n\n  /**** extract actual reponse from command output ****/\n\n    let ResponseFrom\n    if (ModelInfo.Architecture === 'gptneox') {\n      ResponseFrom = function (Text) {\n        const HeaderLength = Text.indexOf('\\nmain: token[0]')\n        Text = Text.slice(HeaderLength + 1)\n\n        const TrailerIndex = Text.indexOf('\\n\\n')\n        Text = Text.slice(0,TrailerIndex)\n\n        return Text.split('\\n').length\n      }\n    } else {\n      ResponseFrom = function (Text) {\n        let HeaderLength = Text.indexOf('system_info')\n        Text = Text.slice(HeaderLength + 1)\n          .replace(/^[^\\n]*\\n/,'')\n\n        let TrailerIndex = Text.indexOf('\\n\\nllama_print_timings')\n        Text = Text.slice(0,TrailerIndex)\n\n        return Text.split('\\n').length\n      }\n    }\n\n  /**** now tokenize the given prompt ****/\n\n    node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n    const ShellProcess = child_process.exec(Command, Options)\n    let stdout = ''\n    for await (const Chunk of ShellProcess.stdout) {\n      stdout += Chunk\n    }\n\n    let stderr = ''\n    for await (const Chunk of ShellProcess.stderr) {\n      stderr += Chunk\n    }\n\n    const ExitCode = (await new Promise((resolve) => {\n      ShellProcess.on('close', resolve)\n    })) || 0\n    if (ExitCode !== 0) {\n      node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n      msg.statusCode = 500 + ExitCode\n      msg.payload = stderr\n    } else {\n      node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n      stdout = stdout.trim()\n\n      msg.statusCode = (stdout === '' ? 204 : 200)\n      msg.payload    = ResponseFrom(stdout)\n    }\n\n    node.send([msg,null])\n    node.done()\n  } catch (Signal) {\n    msg.statusCode = Signal.statusCode || 500\n    msg.payload    = Signal.message\n\n    node.send([null,msg])\n    node.done()\n  }\n\n/**** encoded ****/\n\n  function encoded(Text) {\n    return Text.replace(/'/g, \"'\\\"'\\\"'\")\n  }\n})()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "child_process",
                "module": "child_process"
            }
        ],
        "x": 960,
        "y": 680,
        "wires": [
            [
                "bf118629fea1988e"
            ],
            [
                "37c6e1d2be1d4cb3"
            ]
        ]
    },
    {
        "id": "37c6e1d2be1d4cb3",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1110,
        "y": 700,
        "wires": []
    },
    {
        "id": "bbec528975e3afa6",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Embeddings Calculation",
        "info": "",
        "x": 790,
        "y": 740,
        "wires": []
    },
    {
        "id": "116a6903686ed624",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "calculate_embeddings",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 780,
        "y": 800,
        "wires": [
            [
                "960554b7f1796b90"
            ]
        ]
    },
    {
        "id": "d5aec8b7b51cab38",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1140,
        "y": 780,
        "wires": []
    },
    {
        "id": "960554b7f1796b90",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { quoted } = flow.get('JIL')\n\nconst {\n  acceptableNumberInRange, acceptableIntegerInRange, acceptableString,\n    acceptableModel,\n  assertInspectableFolder, assertExecutableFile,\n  InfoForModel, FileForModel,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\nconst ExecutableFolder = flow.get('ExecutableFolder')\n\n;(async function () {\n  try {\n    let Prompt = acceptableString(msg.payload)\n      Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n  /**** retrieve settings or provide defaults ****/\n\n    let Model     = acceptableModel(msg.Model,'embeddings') || DefaultTextModel\n    let ModelFile = await FileForModel(Model)\n    let ModelInfo = InfoForModel(Model)\n\n    let Seed          = acceptableIntegerInRange(msg.Seed,           -1, -1)\n    let Threads       = acceptableIntegerInRange(msg.Threads,         4, 1,os.cpus().length)\n    let ContextLength = acceptableIntegerInRange(msg.ContextLength, 512, 1,ModelInfo.ContextLength)\n\n  /**** determine executable ****/\n\n    let ExecutableFile = path.join(\n      ExecutableFolder, 'llama-embeddings'\n    )\n    await assertExecutableFile(ExecutableFile)\n\n  /**** combine all these settings into a command ****/\n\n    let Command = (\n      ExecutableFile + ' --model ' + ModelFile + ' --mlock ' +\n      ' --ctx_size ' + ContextLength +\n      ' --threads ' + Threads +\n      ' --seed ' + Seed +\n      ' --prompt \"' + encoded(Prompt) + '\"'\n    )\n\n    const Options = {\n      cwd:ExecutableFolder\n    }\n\n  /**** extract actual reponse from command output ****/\n\n    let ResponseFrom = function (Text) {\n      let HeaderLength = Text.indexOf('system_info')\n      Text = Text.slice(HeaderLength + 1)\n        .replace(/^[^\\n]*\\n/,'')\n  \n      let TrailerIndex = Text.indexOf('\\n\\nllama_print_timings')\n      Text = Text.slice(0,TrailerIndex)\n  \n      return Text\n    }\n\n  /**** now infer a response from the given prompt ****/\n\n    node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n    const ShellProcess = child_process.exec(Command, Options)\n    let stdout = ''\n    for await (const Chunk of ShellProcess.stdout) {\n      stdout += Chunk\n    }\n\n    let stderr = ''\n    for await (const Chunk of ShellProcess.stderr) {\n      stderr += Chunk\n    }\n\n    const ExitCode = (await new Promise((resolve) => {\n      ShellProcess.on('close', resolve)\n    })) || 0\n    if (ExitCode !== 0) {\n      node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n      msg.statusCode = 500 + ExitCode\n      msg.payload = stderr\n    } else {\n      node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n      stdout = stdout.trim()\n\n      msg.statusCode = (stdout === '' ? 204 : 200)\n      msg.payload    = ResponseFrom(stdout).trim().split(' ').map((x) => parseFloat(x))\n    }\n\n    node.send([msg,null])\n    node.done()\n  } catch (Signal) {\n    msg.statusCode = Signal.statusCode || 500\n    msg.payload    = Signal.message\n\n    node.send([null,msg])\n    node.done()\n  }\n\n/**** encoded ****/\n\n  function encoded(Text) {\n    return Text.replace(/'/g, \"'\\\"'\\\"'\")\n  }\n})()\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "child_process",
                "module": "child_process"
            }
        ],
        "x": 980,
        "y": 800,
        "wires": [
            [
                "d5aec8b7b51cab38"
            ],
            [
                "3dcfa399ebb7d740"
            ]
        ]
    },
    {
        "id": "3dcfa399ebb7d740",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1130,
        "y": 820,
        "wires": []
    },
    {
        "id": "348a86265f575987",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Human Language Detection",
        "info": "",
        "x": 1460,
        "y": 100,
        "wires": []
    },
    {
        "id": "e88a0b3547f6594c",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "detect_language",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "d03bb84a526ad431"
            ]
        ]
    },
    {
        "id": "98cedf9a86bd6b9d",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1760,
        "y": 140,
        "wires": []
    },
    {
        "id": "d03bb84a526ad431",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "\nreturn [msg,null]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 160,
        "wires": [
            [
                "98cedf9a86bd6b9d"
            ],
            [
                "b5638f3ac64c1674"
            ]
        ]
    },
    {
        "id": "b5638f3ac64c1674",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1750,
        "y": 180,
        "wires": []
    },
    {
        "id": "3d827ad7bde5beea",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Human Language Translation",
        "info": "",
        "x": 1460,
        "y": 220,
        "wires": []
    },
    {
        "id": "026b1705c622de13",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "translate_language",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "aa416e40c794fa7d"
            ]
        ]
    },
    {
        "id": "0e4f85f3a5c46b61",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1780,
        "y": 260,
        "wires": []
    },
    {
        "id": "aa416e40c794fa7d",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "\nreturn [msg,null]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 280,
        "wires": [
            [
                "0e4f85f3a5c46b61"
            ],
            [
                "9779b2e614b6abc2"
            ]
        ]
    },
    {
        "id": "9779b2e614b6abc2",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1770,
        "y": 300,
        "wires": []
    },
    {
        "id": "e3094dbcff84f179",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Code Execution (JavaScript only)",
        "info": "",
        "x": 1470,
        "y": 380,
        "wires": []
    },
    {
        "id": "51b0b932c17bfa2d",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "run_code",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 1400,
        "y": 440,
        "wires": [
            [
                "d7dfd717dbdde363"
            ]
        ]
    },
    {
        "id": "c158ce3d4af296f9",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1720,
        "y": 420,
        "wires": []
    },
    {
        "id": "d7dfd717dbdde363",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "\nreturn [msg,null]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 440,
        "wires": [
            [
                "c158ce3d4af296f9"
            ],
            [
                "e66c826580621b7b"
            ]
        ]
    },
    {
        "id": "e66c826580621b7b",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1710,
        "y": 460,
        "wires": []
    },
    {
        "id": "7ce3909c02c47c3f",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Web Search",
        "info": "",
        "x": 1410,
        "y": 540,
        "wires": []
    },
    {
        "id": "846ed928e89db724",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "search_the_web",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "b42b7932e7128830"
            ]
        ]
    },
    {
        "id": "d86c44e95843ee79",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1760,
        "y": 580,
        "wires": []
    },
    {
        "id": "b42b7932e7128830",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const { acceptableString } = flow.get('commonCode')\n\n;(async function () {\n  let SearchString = acceptableString(msg.payload).trim()\n  if (SearchString === '') {\n    msg.payload = 'empty or missing search string'\n\n    node.send([null,msg])\n    node.done()\n    return\n  }\n\n/**** now run the desired search ****/\n\n  try {\n    node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\nnode.warn('SearchString ' + SearchString)\n    let Response = await axios.get(\n      `https://api.duckduckgo.com/?q=${SearchString}&format=json&pretty=1`\n    )\n\n    function ResultsFrom (Response) {\nnode.warn(Response)\n      return [{\n        Date:       Date.now(),\n        URL:        Response.data.AbstractURL,\n        Title:      Response.data.heading || '',\n        Description:Response.data.AbstractText\n      }]\n    }\n\n    switch (Response.status) {\n      case 200:\n        node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n        msg.statusCode = 200\n        msg.payload    = ResultsFrom(Response)\n        break\n      case 204:\n        node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n        msg.statusCode = 204\n        msg.payload    = []\n        break\n      default:\n        node.status({ fill: 'red', shape: 'dot', text: 'StatusCode = ' + Response.status })\n\n        msg.statusCode = Response.status\n        msg.payload    = Response.statusText\n\n        node.send([null,msg])\n        node.done()\n        return\n    }\n\n    node.send([msg,null])\n    node.done()\n  } catch (Signal) {\n    msg.statusCode = 500\n    msg.payload    = Signal + ''\n\n    node.send([null,msg])\n    node.done()\n  }\n})()\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 1600,
        "y": 600,
        "wires": [
            [
                "d86c44e95843ee79"
            ],
            [
                "6e2a22ba9c013192"
            ]
        ]
    },
    {
        "id": "6e2a22ba9c013192",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1750,
        "y": 620,
        "wires": []
    },
    {
        "id": "4df6b4aae91f115a",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "additional Functions",
        "info": "",
        "x": 1430,
        "y": 40,
        "wires": []
    },
    {
        "id": "824cd5cda7ca9aea",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Prompt Formatting",
        "info": "",
        "x": 770,
        "y": 900,
        "wires": []
    },
    {
        "id": "e797eb18a788acf0",
        "type": "reusable-in",
        "z": "a38a9db5ce759685",
        "name": "format_prompt",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 760,
        "y": 960,
        "wires": [
            [
                "0f1f03c6434b1bdf"
            ]
        ]
    },
    {
        "id": "dddfc2ee8a7ac03f",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "success",
        "position": 1,
        "x": 1100,
        "y": 940,
        "wires": []
    },
    {
        "id": "0f1f03c6434b1bdf",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "execute",
        "func": "const {\n  acceptableModel, InfoForModel,\n  PromptFromMessages,\n} = flow.get('commonCode')\n\nconst DefaultTextModel = flow.get('DefaultTextModel')\n\ntry {\n  let MessageList = msg.payload                       // will be validated later\n\n/**** retrieve settings or provide defaults ****/\n\n  let Model     = acceptableModel(msg.Model,'text') || DefaultTextModel\n  let ModelInfo = InfoForModel(Model)\n\n/**** then construct a prompt from the given messages ****/\n\n  msg.payload = PromptFromMessages(MessageList,Model) // validates \"MessageList\"\n\n  return [msg,null]\n} catch (Signal) {\n  msg.statusCode = Signal.statusCode || 500\n  msg.payload    = Signal.message\n\n  return [null,msg]\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 960,
        "wires": [
            [
                "dddfc2ee8a7ac03f"
            ],
            [
                "63356c4f9075de31"
            ]
        ]
    },
    {
        "id": "63356c4f9075de31",
        "type": "reusable-out",
        "z": "a38a9db5ce759685",
        "name": "failure",
        "position": "2",
        "x": 1090,
        "y": 980,
        "wires": []
    },
    {
        "id": "9549044093d0ba17",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "LLMs",
        "info": "",
        "x": 730,
        "y": 40,
        "wires": []
    },
    {
        "id": "18984ea08c144398",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Convenience Functions for Inspection and Test",
        "info": "",
        "x": 200,
        "y": 400,
        "wires": []
    },
    {
        "id": "01a3df754bc50d8c",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Installation Requirements (dbl-click to reveal)",
        "info": "# Installation Requirements #\n\nPlease install the following nodes (use \"Manage Palette\" from the menu):\n\n* node-red-contrib-reusable-flows\n* TotallyInformation/node-red-contrib-events",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "f2a03c81b8cc7e7a",
        "type": "comment",
        "z": "a38a9db5ce759685",
        "name": "Model Installation (dbl-click to reveal)",
        "info": "",
        "x": 1090,
        "y": 40,
        "wires": []
    },
    {
        "id": "5248a8427f232978",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "ee86e89fa5ccab7b"
            ]
        ]
    },
    {
        "id": "ee86e89fa5ccab7b",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "function 1",
        "func": "(async () => {\n  const query = 'who was Joseph Weizenbaum?'\n\n  const response = await axios.get(\n    `https://www.bing.com/search?q=${encodeURIComponent(query)}&setlang=en`\n  )\n  const $ = cheerio.load(response.data)\n  const results = []\n  $('.b_algo').each((index, element) => {\n    const Title       = $(element).find('h2').text()\n    const URL         = $(element).find('h2 a').attr('href')\n    const Description = $(element).find('.b_caption p').text()\n    results.push({ Title, URL, Description })\n  })\nnode.warn(results)\n})()\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "JIL",
                "module": "node-red-javascript-interface-library"
            },
            {
                "var": "axios",
                "module": "axios"
            },
            {
                "var": "cheerio",
                "module": "cheerio"
            }
        ],
        "x": 580,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "46c89ac9fcb8e2c0",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "common Code",
        "func": "node.status({ fill:'yellow', shape:'ring', text:'loading' })\n\nconst {\n  quoted,\n  ValueIsBoolean,\n  ValueIsNumber, ValueIsNumberInRange,\n  ValueIsInteger, ValueIsIntegerInRange,\n  ValueIsString, ValueIsNonEmptyString, ValueIsStringMatching,\n  ValueIsPlainObject,\n  ValueIsListSatisfying,\n  ValueIsOneOf,\n  ValidatorForClassifier, acceptNil, rejectNil,\n  allowCardinal,\n  allowedString, allowNonEmptyString, expectNonEmptyString, expectStringMatching,\n  expectedObject, allowPlainObject,\n  allowListSatisfying, expectListSatisfying,\n  expectOneOf,\n  allowURL,\n} = flow.get('JIL')\n\nclass commonCode {\n/**** throwError ****/\n\n  static throwError (StatusCode, Message) {\n    const decoratedError = new Error(Message)\n      decoratedError.statusCode = StatusCode\n    throw decoratedError\n  }\n\n/**** newUUID ****/\n\n  static newUUID () {\n    let UUID = '', UUIDPart\n    UUIDPart = Math.round(Math.random()*0xffffffff).toString(16)\n      UUID += UUIDPart + '00000000'.slice(UUIDPart.length) + '-'\n      UUIDPart = Math.round(Math.random()*0xffff).toString(16)\n      UUID += UUIDPart + '0000'.slice(UUIDPart.length) + '-4'\n      UUIDPart = Math.round(Math.random()*0xfff).toString(16)\n      UUID += UUIDPart + '000'.slice(UUIDPart.length) + '-'\n      UUIDPart = Math.round(Math.random()*0x3fff+0x8000).toString(16)\n      UUID += UUIDPart + '-'\n      UUIDPart = Math.round(Math.random()*0xffffffffffff).toString(16)\n      UUID += UUIDPart + '000000000000'.slice(UUIDPart.length)\n    return UUID.toLowerCase()\n  }\n\n/**** openScope ****/\n\n  static openScope (msg) {\n    let ScopeStack = msg._ScopeStack\n    if (ScopeStack == null) { ScopeStack = msg._ScopeStack = [] }\n\n    if (msg.Scope != null) {\n      ScopeStack.push(msg.Scope)\n    }\n    msg.Scope = {}\n  }\n\n/**** closeScope ****/\n\n  static closeScope (msg) {\n    let ScopeStack = msg._ScopeStack\n    if (ScopeStack == null) { return msg }\n\n    msg.Scope = ScopeStack.pop()\n  }\n\n/**** ValueIsMessage ****/\n\n  static ValueIsMessage (Value) {\n    return (\n      ValueIsPlainObject(Value) &&\n      ValueIsOneOf(Value.role,['system','user','assistant']) &&\n      ValueIsString(Value.content)\n    )\n  }\n\n/**** ValueIsMessageList ****/\n\n  static ValueIsMessageList (Value) {\n    if (\n      ValueIsListSatisfying(Value,commonCode.ValueIsMessage) &&\n      (Value.length > 0)\n    ) {\n      let i = 0, l = Value.length\n      if (Value[0].role === 'system') { i++ }\n\n      for (;i < l; i += 2) {\n        if (Value[i].role !== 'assistant') { return false }\n        if (i+1 === l) { break }\n\n        if (Value[i+1].role !== 'user') { return false }\n      }\n\n      return true\n    }\n    return false\n  }\n\n/**** allow/expect[ed]MessageList ****/\n\n  static allowMessageList = ValidatorForClassifier(\n    commonCode.ValueIsMessageList, acceptNil, 'chat message list'\n  )\n  static allowedMessageList = commonCode.allowMessageList\n\n  static expectMessageList = ValidatorForClassifier(\n    commonCode.ValueIsMessageList, rejectNil, 'chat message list'\n  )\n  static expectedMessageList = commonCode.expectMessageList\n\n/**** acceptableBoolean ****/\n\n  static acceptableBoolean (Value, Default) {\n    return (ValueIsBoolean(Value) ? Value : Default)\n  }\n\n/**** acceptableNumber ****/\n\n  static acceptableNumber (Value, Default) {\n    return (ValueIsNumber(Value) ? Value : Default)\n  }\n\n/**** acceptableNumberInRange ****/\n\n  static acceptableNumberInRange (\n    Value, Default, minValue, maxValue, withMin, withMax\n  ) {\n    return (ValueIsNumberInRange(Value,minValue,maxValue,withMin,withMax) ? Value : Default)\n  }\n\n/**** acceptableInteger ****/\n\n  static acceptableInteger (Value, Default) {\n    return (ValueIsInteger(Value) ? Value : Default)\n  }\n\n/**** acceptableIntegerInRange ****/\n\n  static acceptableIntegerInRange (Value, Default, minValue, maxValue) {\n    return (ValueIsIntegerInRange(Value,minValue,maxValue) ? Value : Default)\n  }\n\n/**** acceptableString ****/\n\n  static acceptableString (Value, Default) {\n    return (ValueIsString(Value) ? Value : Default)\n  }\n\n/**** acceptableNonEmptyString ****/\n\n  static acceptableNonEmptyString (Value, Default) {\n    return (ValueIsString(Value) && (Value.trim() !== '') ? Value : Default)\n  }\n\n/**** acceptableStringMatching ****/\n\n  static acceptableStringMatching (Value, Default, Pattern) {\n    return (ValueIsStringMatching(Value,Pattern) ? Value : Default)\n  }\n\n/**** acceptableModel ****/\n\n  static acceptableModel (Value, Purpose) {\n    if (! ValueIsStringMatching(Value,ModelNamePattern)) { return undefined }\n\n    const Model     = ModelNamePattern.exec(Value)[0].toLowerCase()\n    const ModelInfo = knownModelSet[Model]\n\n    return (\n      (ModelInfo != null) && (ModelInfo.Purposes.indexOf(Purpose) >= 0)\n    ) ? Value : undefined\n  }\n\n/**** assertInspectableFolder ****/\n\n  static async assertInspectableFolder (FolderPath) {\n    try {\n      const FileInfo = await fs.promises.stat(FolderPath)\n      if (! FileInfo.isDirectory()) throwError(\n        500,quoted(FolderPath) + ' is not a directory'\n      )\n    } catch (Signal) {\n      if (Signal.code === 'ENOENT') {\n        throwError(500,quoted(FolderPath) + ' does not exist')\n      } else {\n        throwError(500,'internal error: ' + Signal)\n      }\n    }\n  }\n\n/**** assertReadableFile ****/\n\n  static async assertReadableFile (FilePath) {\n    try {\n      const FileInfo = await fs.promises.stat(FilePath)\n      if (! FileInfo.isFile()) throwError(\n        500,quoted(FilePath) + ' is not a file'\n      )\n    } catch (Signal) {\n      if (Signal.code === 'ENOENT') {\n        throwError(500,quoted(FilePath) + ' does not exist')\n      } else {\n        throwError(500,'internal error: ' + Signal)\n      }\n    }\n\n    try {\n      await fs.promises.access(FilePath, fs.constants.R_OK)\n    } catch (Signal) {\n      throwError(500,quoted(FilePath) + ' can not be read')\n    }\n  }\n\n/**** assertExecutableFile ****/\n\n  static async assertExecutableFile (FilePath) {\n    try {\n      const FileInfo = await fs.promises.stat(FilePath)\n      if (! FileInfo.isFile()) throwError(\n        500,quoted(FilePath) + ' is not a file'\n      )\n    } catch (Signal) {\n      if (Signal.code === 'ENOENT') {\n        throwError(500,quoted(FilePath) + ' does not exist')\n      } else {\n        throwError(500,'internal error: ' + Signal)\n      }\n    }\n\n    try {\n      await fs.promises.access(FilePath, fs.constants.X_OK)\n    } catch (Signal) {\n      throwError(500,quoted(FilePath) + ' is not executable')\n    }\n  }\n\n/**** knownModels ****/\n\n  static ModelNamePattern = /^[a-z0-9_]+(-(?!q\\d)([0-9.]+[bt]|\\d+e\\dt|[a-z0-9_]+))*/i\n\n  static supportedArchitectures = ['llama','stablelm','gptneox']\n  static supportedPurposes      = ['text','code','embeddings']\n\n  static knownModelSet = Object.create(null)\n\n  static knownModels () {\n    return Object.keys(knownModelSet).map((Id) => knownModelSet[Id].Model)\n  }\n\n  static ModelIsKnown (Model) {\n    expectNonEmptyString('searched model',Model)\n    return (Model.trim().toLowerCase() in knownModelSet)\n  }\n\n/**** learnModel ****/\n\n  static learnModel (Descriptor) {\n    let {\n      Model, ModelURL, Creator, CreatorURL,\n      Architecture, Purposes,\n      Templates, ContextLength, ReversePrompts,\n      Documentation, License, LicenseURL,\n    } = expectedObject('model descriptor', Descriptor)\n\n    expectStringMatching('model name',Model,ModelNamePattern)\n\n    const ModelId = ModelNamePattern.exec(Model)[0].toLowerCase()\n    if (ModelId.length !== Model.length) throwError(\n      500,'invalid model name given (' + quoted(Model) + ')'\n    )\n\n    allowURL('model URL',ModelURL)\n\n    allowNonEmptyString('model creator name',Creator)\n    allowURL            ('model creator URL',CreatorURL)\n\n    expectOneOf('model architecture',Architecture,supportedArchitectures)\n\n    function ValueIsPurpose (Value) {\n      return ValueIsOneOf(Value,supportedPurposes)\n    }\n    expectListSatisfying('intended model purposes',Purposes,ValueIsPurpose)\n\n    function normalizedTemplates (Templates) {\n      let { Prefix,System,User,Assistant,Suffix } = Templates\n        Prefix    =     allowedString('model system message default',Prefix)    || ''\n        System    =    allowedString('model system message template',System)    || '${Content}'\n        User      =      allowedString('model user message template',User)      || '${Content}'\n        Assistant = allowedString('model assistant message template',Assistant) || '${Content}'\n        Suffix    =              allowedString('model prompt suffic',Suffix)    || ''\n      return { Prefix,System,User,Assistant,Suffix }\n    }\n    allowPlainObject('message template set',Templates)\n    Templates = normalizedTemplates(Templates || {})\n\n    allowCardinal('model context length',ContextLength)\n      if (ContextLength  == null) { ContextLength  = 4096 }\n    allowListSatisfying('reverse prompt list',ReversePrompts, ValueIsNonEmptyString)\n      if (ReversePrompts == null) { ReversePrompts = [] }\n\n    allowURL('model documentation URL',Documentation)\n\n    allowNonEmptyString('model license',License)\n    allowURL       ('model license URL',LicenseURL)\n\n    const normalizedDescriptor = {\n      Model, ModelURL, Creator, CreatorURL,\n      Architecture, Purposes,\n      Templates, ContextLength, ReversePrompts,\n      Documentation, License, LicenseURL,\n    }\n    knownModelSet[ModelId] = normalizedDescriptor\n  }\n\n/**** learnModels ****/\n\n  static learnModels (DescriptorList) {\n    expectListSatisfying('list of model descriptors',DescriptorList,ValueIsPlainObject)\n    DescriptorList.forEach((Descriptor) => learnModel(Descriptor))\n  }\n\n/**** FileLooksLikeAModel ****/\n\n  static FileLooksLikeAModel (FilePath) {\n    const FileName   = path.basename(FilePath)\n    const FileSuffix = path.extname(FilePath)\n    return (\n      ModelNamePattern.test(FileName) &&\n      /[.](bin|ggml|gguf)/.test(FileSuffix)\n    )\n  }\n\n/**** ModelFromFileName ****/\n\n  static ModelFromFileName (FilePath) {\n    const FileName = path.basename(FilePath)\n\n    const Match = ModelNamePattern.exec(FileName)\n    if (Match == null) {\n      throwError(500,'file ' + quoted(FileName) + ' does not look like a model file')\n    } else {\n      return Match[0]\n    }\n  }\n\n/**** availableModels ****/\n\n  static async availableModels () {\n    try {\n      const ModelFolder = flow.get('ModelFolder')\n      await assertInspectableFolder(ModelFolder)\n\n      const FileNameList  = await fs.promises.readdir(ModelFolder)\n      const ModelNameList = FileNameList.filter(\n        (FileName) => FileLooksLikeAModel(FileName)\n      ).map(\n        (FileName) => ModelFromFileName(FileName)\n      )\n\n      return ModelNameList\n    } catch (Signal) {\n      if (Signal.statusCode == null) {\n        throwError(500,'Internal Error: ' + Signal)\n      } else {\n        throw Signal\n      }\n    }\n  }\n\n/**** InfoForModel ****/\n\n  static InfoForModel (Model) {\n    const ModelName = ModelFromFileName(Model).toLowerCase()\n    return knownModelSet[ModelName]\n  }\n\n/**** FileForModel ****/\n\n  static async FileForModel (Model) {\n    let ModelFolder = flow.get('ModelFolder')\n\n    try {\n      let ModelName = ModelFromFileName(Model), FilePath\n      if (path.extname(Model) !== '') {                // \"Model\" is a file path\n        FilePath = path.join(ModelFolder,Model)\n        await assertReadableFile(FilePath)\n      } else {                                   // \"Model\" is just a model name\n        const FileNameList  = await fs.promises.readdir(ModelFolder)\n        const ModelFileList = FileNameList.filter((FileName) =>\n          FileLooksLikeAModel(FileName) &&\n          FileName.toLowerCase().startsWith(Model.toLowerCase())\n        )\n        if (ModelFileList.length > 0) {\n          FilePath = path.join(ModelFolder,ModelFileList[0])\n          await assertReadableFile(FilePath)\n        } else {\n          throwError(500,'no file for model ' + quoted(Model))\n        }\n      }\n\n      return FilePath\n    } catch (Signal) {\n      if (Signal.statusCode == null) {\n        throwError(500,'Internal Error: ' + Signal)\n      } else {\n        throw Signal\n      }\n    }\n  }\n\n/**** PromptFromMessages ****/\n\n  static PromptFromMessages (MessageList,Model) {\n    expectMessageList('list of chat messages',MessageList)\n\n    let ModelInfo = InfoForModel(Model)\n    let Templates = ModelInfo.Templates\n\n    let Prompt = ''\n      if ((MessageList[0] != null) && (MessageList[0].role !== 'system')) {\n        Prompt = Templates.Prefix || ''\n      }\n\n      MessageList.forEach((Message) => {\n        switch (Message.role) {\n          case 'system':\n            Prompt += Templates.System.replace('${Content}',Message.content)\n            break\n          case 'user':\n            Prompt += Templates.User.replace('${Content}',Message.content)\n            break\n          case 'assistant':\n            Prompt += Templates.Assistant.replace('${Content}',Message.content)\n            break\n        }\n      })\n\n      Prompt += Templates.Suffix || ''\n    return Prompt\n  }\n\n\n}\nflow.set('commonCode',commonCode)\n\nconst {\n  ModelNamePattern,\n  knownModelSet, supportedArchitectures, supportedPurposes,\n  throwError,\n  expectMessageList,\n  assertInspectableFolder, assertReadableFile,\n  learnModel, learnModels,\n  FileLooksLikeAModel, ModelFromFileName,\n  InfoForModel,\n} = commonCode\n\n\nlearnModels([\n/**** 1.3B ****/\n\n  {\n    Model:   '42dot_LLM-SFT-1.3B',\n    ModelURL:'https://huggingface.co/42dot/42dot_LLM-SFT-1.3B',\n\n    Creator:   '42dot',\n    CreatorURL:'https://huggingface.co/42dot',\n\n    Architecture: 'llama',\n    Purposes:     ['text','embeddings'],\n    Templates: {\n      Prefix:   undefined,\n      System:   '',\n      User:     '<human>: ${Content}',\n      Assistant:'<bot>:${Content}',\n      Suffix:   '<bot>:',\n    },\n    ContextLength:4096,\n    ReversePrompts:['<|endoftext|>'],\n\n    Documentation:'https://github.com/42dot/42dot_LLM',\n\n    License:   'CC BY-NC 4.0',\n    LicenseURL:'https://creativecommons.org/licenses/by-nc/4.0/',\n  },\n\n/**** 3B ****/\n\n  {\n    Model:   'StableLM-3B-4E1T',\n    ModelURL:'https://huggingface.co/stabilityai/stablelm-3b-4e1t',\n\n    Creator:   'Stability AI',\n    CreatorURL:'https://huggingface.co/stabilityai',\n\n    Architecture: 'stablelm',\n    Purposes:     ['text','embeddings'],\n    Templates: {\n      Prefix:   undefined,\n      System:   '${Content}\\n',\n      User:     '${Content}\\n',\n      Assistant:'[COMPLETION START]\\n${Content}\\n[COMPLETION END]\\n',\n      Suffix:   '[COMPLETION START]\\n',\n    },\n    ContextLength:4096,\n    ReversePrompts:['[COMPLETION START]','[COMPLETION END]'],\n\n    Documentation:'https://stability.wandb.io/stability-llm/stable-lm/reports/StableLM-3B-4E1T--VmlldzoyMjU4?accessToken=u3zujipenkx5g7rtcj9qojjgxpconyjktjkli2po09nffrffdhhchq045vp0wyfo',\n\n    License:   'CC BY-SA-4.0',\n    LicenseURL:'https://creativecommons.org/licenses/by-sa/4.0/',\n  },\n\n  {\n    Model:   'StableCode-Completion-Alpha-3B-4K',\n    ModelURL:'https://huggingface.co/stabilityai/stablecode-completion-alpha-3b-4k',\n\n    Creator:   'Stability AI',\n    CreatorURL:'https://huggingface.co/stabilityai',\n\n    Architecture: 'gptneox',\n    Purposes:     ['code'],\n    Templates: {\n      Prefix:   undefined,\n      System:   '${Content}\\n',\n      User:     '${Content}\\n',\n      Assistant:'${Content}\\n',\n      Suffix:   '',\n    },\n    ContextLength:4096,\n    ReversePrompts:[],\n\n    Documentation:undefined,\n\n    License:   'Apache 2.0',\n    LicenseURL:'https://www.apache.org/licenses/LICENSE-2.0',\n  },\n\n/**** 7B ****/\n\n  {\n    Model:   'Dans-TotSirocco-7b',\n    ModelURL:'https://huggingface.co/PocketDoc/Dans-TotSirocco-7b',\n\n    Creator:   'PocketDoc Labs',\n    CreatorURL:'https://huggingface.co/PocketDoc',\n\n    Architecture: 'llama',\n    Purposes:     ['text','embeddings'],\n    Templates: {\n      Prefix:   undefined,\n      System:   '<|system|>${Content}',\n      User:     '<|user|>${Content}',\n      Assistant:'<|model|>${Content}',\n      Suffix:   '<|model|>',\n    },\n    ContextLength:4096,\n    ReversePrompts:[],\n\n    Documentation:undefined,\n\n    License:   'Apache 2..0',\n    LicenseURL:'https://choosealicense.com/licenses/apache-2.0/',\n  },\n\n  {\n    Model:   'deepseek-coder-6.7b-instruct',\n    ModelURL:'https://huggingface.co/deepseek-ai/deepseek-coder-6.7b-instruct',\n\n    Creator:   'DeepSeek',\n    CreatorURL:'https://huggingface.co/deepseek-ai',\n\n    Architecture: 'llama',\n    Purposes:     ['code'],\n    Templates: {\n      Prefix:   'You are an AI programming assistant, utilizing the Deepseek ' +\n                'Coder model, developed by Deepseek Company, and you only ' +\n                'answer questions related to computer science. For politically ' +\n                'sensitive questions, security and privacy issues, and other ' +\n                'non-computer science questions, you will refuse to answer.\\n',\n      System:   '${Content}\\n',\n      User:     '### Instruction:\\n${Content}\\n',\n      Assistant:'### Response:\\n${Content}\\n<|EOT|>\\n',\n      Suffix:   '### Response:\\n',\n    },\n    ContextLength:16384,\n    ReversePrompts:['<|EOT|>','<｜end▁of▁sentence｜>'],\n\n    Documentation:'https://deepseekcoder.github.io/',\n\n    License:   'deepseek',\n    LicenseURL:'https://github.com/deepseek-ai/deepseek-coder/blob/main/LICENSE-MODEL',\n  },\n])\n\nnode.status({ fill:'green', shape:'dot', text:'loaded' })\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "node.status({ fill: 'red', shape: 'dot', text: 'pending' })\n",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "ecaedff977981d84"
            ]
        ]
    },
    {
        "id": "f1a04b041f3a7c8d",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "javascript-interface-library",
        "func": "// no code here, only in the \"Start\" tab!\n// no code here, only in the \"Start\" tab!\n// no code here, only in the \"Start\" tab!\n// no code here, only in the \"Start\" tab!\n// no code here, only in the \"Start\" tab!\n// no code here, only in the \"Start\" tab!",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "node.status({ fill: 'yellow', shape: 'ring', text: 'loading' })\nflow.set('JIL', JIL)\n\n/**** very special version of \"ValueIsPlainObject\" for Node-RED ****/\n\nJIL.ValueIsPlainObject = function (Value) {\n    return (\n        (Value != null) && (typeof Value === 'object') &&\n        (Object.getPrototypeOf(Value.constructor.prototype) == null)\n    )\n}\n\n/**** very special version of \"allow/expect[ed]PlainObject\" for Node-RED ****/\n\nconst { ValidatorForClassifier, acceptNil, rejectNil } = JIL\n\nJIL.allowPlainObject = ValidatorForClassifier(\n    JIL.ValueIsPlainObject, acceptNil, '\"plain\" JavaScript object'\n)\nJIL.allowedPlainObject = JIL.allowPlainObject\n\nJIL.expectPlainObject = ValidatorForClassifier(\n    JIL.ValueIsPlainObject, rejectNil, '\"plain\" JavaScript object'\n)\nJIL.expectedPlainObject = JIL.expectPlainObject\nnode.status({ fill: 'green', shape: 'dot', text: 'loaded' })\n\nnode.send({ payload: 'continue initialization' })",
        "finalize": "",
        "libs": [
            {
                "var": "JIL",
                "module": "node-red-javascript-interface-library"
            }
        ],
        "x": 140,
        "y": 100,
        "wires": [
            [
                "46c89ac9fcb8e2c0"
            ]
        ]
    },
    {
        "id": "ecaedff977981d84",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "Configuration Presets",
        "func": "node.status({ fill:'yellow', shape:'ring', text:'configuring' })\n  const ModelFolder = path.join(process.env.HOME,'.node-red')\n  flow.set('ModelFolder',ModelFolder)\n\n  const ExecutableFolder = path.join(process.env.HOME,'.node-red')\n  flow.set('ExecutableFolder',ExecutableFolder)\n\nflow.set('DefaultTextModel',      '42dot_LLM-SFT-1.3B_Q8_0.gguf')\n  flow.set('DefaultCodeModel',      'deepseek-coder-6.7b-instruct')\nflow.set('DefaultEmbeddingsModel','42dot_LLM-SFT-1.3B_Q8_0.gguf')\nnode.status({ fill:'green', shape:'dot', text:'configured' })\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "node.status({ fill: 'red', shape: 'dot', text: 'pending' })\n",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 160,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1f372c8542188445",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "e2790890721563b6"
            ]
        ]
    },
    {
        "id": "e2790890721563b6",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "Configuration",
        "func": "const { quoted } = flow.get('JIL')\n  msg.payload = `\nModelFolder:      ${quoted(flow.get('ModelFolder'))}\nExecutableFolder: ${quoted(flow.get('ExecutableFolder'))}\n\nDefaultTextModel:       ${quoted(flow.get('DefaultTextModel'))}\nDefaultCodeModel:       ${quoted(flow.get('DefaultCodeModel'))}\nDefaultEmbeddingsModel: ${quoted(flow.get('DefaultEmbeddingsModel'))}\n`\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 460,
        "wires": [
            [
                "f2b7401102bdf031"
            ]
        ]
    },
    {
        "id": "f2b7401102bdf031",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "6558b11c4289f9c6",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "76c933574bf8c042"
            ]
        ]
    },
    {
        "id": "76c933574bf8c042",
        "type": "function",
        "z": "a38a9db5ce759685",
        "name": "known Models",
        "func": "const { knownModels } = flow.get('commonCode')\n  msg.payload = knownModels()\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "415d29ca95598351"
            ]
        ]
    },
    {
        "id": "415d29ca95598351",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 520,
        "wires": []
    },
    {
        "id": "ba7842c92190468e",
        "type": "catch",
        "z": "a38a9db5ce759685",
        "name": "uncaught Errors",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1040,
        "wires": [
            [
                "d55e24703a9bb9d8"
            ]
        ]
    },
    {
        "id": "d55e24703a9bb9d8",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "show in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1040,
        "wires": []
    },
    {
        "id": "bc97f2e5530b884c",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "6d952867b596713a"
            ]
        ]
    },
    {
        "id": "17cf8173d1c65be2",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 580,
        "wires": []
    },
    {
        "id": "6d952867b596713a",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "list_models",
        "outputs": 2,
        "x": 250,
        "y": 580,
        "wires": [
            [
                "17cf8173d1c65be2"
            ],
            [
                "17cf8173d1c65be2"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "01d0aa91818dd92f",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "who was Joseph Weizenbaum?",
        "payloadType": "str",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "e9b4b5b0f0ffe5e0"
            ]
        ]
    },
    {
        "id": "b740f18f5871563a",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 640,
        "wires": []
    },
    {
        "id": "e9b4b5b0f0ffe5e0",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "complete_text",
        "outputs": 2,
        "x": 260,
        "y": 640,
        "wires": [
            [
                "b740f18f5871563a"
            ],
            [
                "b740f18f5871563a"
            ]
        ]
    },
    {
        "id": "ce9c7859366054d1",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"role\":\"system\",\"content\":\"respond as exactly and concisely as possible\"},{\"role\":\"user\",\"content\":\"who was Joseph Weizenbaum?\"}]",
        "payloadType": "json",
        "x": 90,
        "y": 700,
        "wires": [
            [
                "9ec586fd8d9ee012"
            ]
        ]
    },
    {
        "id": "541e11a8b10bf4b8",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 700,
        "wires": []
    },
    {
        "id": "9ec586fd8d9ee012",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "complete_chat",
        "outputs": 2,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "541e11a8b10bf4b8"
            ],
            [
                "541e11a8b10bf4b8"
            ]
        ]
    },
    {
        "id": "06b3f1c3b6e3169e",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "who was Joseph Weizenbaum?",
        "payloadType": "str",
        "x": 90,
        "y": 760,
        "wires": [
            [
                "836d0e8fd3ef4ea9"
            ]
        ]
    },
    {
        "id": "9017030c0dcd990d",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 760,
        "wires": []
    },
    {
        "id": "836d0e8fd3ef4ea9",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "tokenize_text",
        "outputs": 2,
        "x": 250,
        "y": 760,
        "wires": [
            [
                "9017030c0dcd990d"
            ],
            [
                "9017030c0dcd990d"
            ]
        ]
    },
    {
        "id": "9d3e80cd22883a11",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "who was Joseph Weizenbaum?",
        "payloadType": "str",
        "x": 90,
        "y": 820,
        "wires": [
            [
                "69537eff7b696d24"
            ]
        ]
    },
    {
        "id": "9dc41a6d97d58b69",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 820,
        "wires": []
    },
    {
        "id": "69537eff7b696d24",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "count_text_tokens",
        "outputs": 2,
        "x": 270,
        "y": 820,
        "wires": [
            [
                "9dc41a6d97d58b69"
            ],
            [
                "9dc41a6d97d58b69"
            ]
        ]
    },
    {
        "id": "4f5667356723b90d",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "who was Joseph Weizenbaum?",
        "payloadType": "str",
        "x": 90,
        "y": 880,
        "wires": [
            [
                "a3eda5d3f760a9ad"
            ]
        ]
    },
    {
        "id": "a47a311b348c30c3",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 880,
        "wires": []
    },
    {
        "id": "a3eda5d3f760a9ad",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "calculate_embeddings",
        "outputs": 2,
        "x": 280,
        "y": 880,
        "wires": [
            [
                "a47a311b348c30c3"
            ],
            [
                "a47a311b348c30c3"
            ]
        ]
    },
    {
        "id": "35e528893797b1ee",
        "type": "inject",
        "z": "a38a9db5ce759685",
        "name": "show",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "who was Joseph Weizenbaum?",
        "payloadType": "str",
        "x": 90,
        "y": 960,
        "wires": [
            [
                "43e9a8318fde4da0"
            ]
        ]
    },
    {
        "id": "e028c1080146ce4b",
        "type": "debug",
        "z": "a38a9db5ce759685",
        "name": "in Debug Pane",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 960,
        "wires": []
    },
    {
        "id": "43e9a8318fde4da0",
        "type": "reusable",
        "z": "a38a9db5ce759685",
        "name": "",
        "target": "search_the_web",
        "outputs": 2,
        "x": 260,
        "y": 960,
        "wires": [
            [
                "e028c1080146ce4b"
            ],
            [
                "e028c1080146ce4b"
            ]
        ]
    }
]